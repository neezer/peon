#!/usr/bin/env bash

list=1

while [ ! $# -eq 0 ]
do
  case "$1" in
    --help | -h)
      cat <<EOF

  peon does things for you!

  Usage: peon <command>

    -c, --commands       see what peon can do for you
    -h, --help           show this menu
    -v, --version        show the version of peon

EOF
      exit 0
      ;;
    --commands | -c)
      list=0
      ;;
    --version | -v)
      echo -e "peon v0.1.3"
      exit 0
      ;;
    *)
      command="$1"
      break
      ;;
  esac
  shift
done

peon_print() {
  if [ $use_tinge = "y" ]; then
    tinge "$1" "$2"
  else
    printf "$2"
  fi
}

which tinge >/dev/null 2>&1
if [ $? -eq 0 ]; then
  use_tinge=y
else
  use_tinge=n
fi

which awk >/dev/null 2>&1
if [ $? -ne 0 ]; then
  peon_print red "awk not found!"
  echo
  echo "Peon needs \`awk\` to do work!"
  exit 1
fi

if [ ! -f ".peon" ]; then
  peon_print red "No peon configuration found!"
  echo
  echo "Peon needs to know a little more about your project"
  echo "before you can put it to work!"
  echo
  echo "1. Create a \`.peon\` file where you want to run peon"
  echo "2. Add the line \`TASKS_IN=\"path/to/your/scripts/directory\"\`"
  echo "3. Run \`peon --commands\` to verify"
  echo
  echo "Profit! :)"
  exit 1
fi

. .peon

if [ -z "$TASKS_IN" ]; then
  peon_print red "\$TASKS_IN is empty!"
  echo
  echo "Peon needs to know where to find tasks!"
  exit 1
fi

if [ ! -d "$TASKS_IN" ]; then
  peon_print red "\$TASKS_IN is not a directory!"
  echo
  echo "Peon expects \$TASKS_IN to be a directory containing bash scripts!"
  exit 1
fi

commands=""

while read -r -d '' file; do
  label=$(awk '/peon:label/ {print $2}' FS="=>" $file | awk '{$1=$1};1')
  desc=$(awk '/peon:desc/ {print $2}' FS="=>" $file | awk '{$1=$1};1')

  if [ -z "$label" ]; then
    continue
  fi

  commands="$commands\n${label}SsS${desc}SsS${file}"
done < <(find $TASKS_IN -type f -name "*.bash" -print0)

matching_command=$(echo -e "$commands" | awk -F "SsS" "\$1==\"$command\" {print \$3}")

if [ ! -z "$matching_command" ]; then
  shift
  if [ "$AUTOLOAD_ENV_FILE" = "true" ]; then
    if [ ! -f .env ]; then
echo    "+----------------------------------------------------------------------+"
echo -n "| "
peon_print yellow ".env is not a file!"
echo    "                                                  |"
echo    "| You've configured peon to autoload env variables from \`.env\`, but it |"
echo    "| appears that \`.env\` is not a file. Perhaps you forgot to create it   |"
echo    "| from  \`.env.example?\`?                                               |"
echo    "+----------------------------------------------------------------------+"
echo
echo    "Continuing ..."

      exec "$matching_command" "$@"
    else
      exec env $(cat .env | grep -v "#" | xargs) "$matching_command" "$@"
    fi
  else
    exec "$matching_command" "$@"
  fi
fi

if [ $list = 0 ]; then
  cat <<EOF

Available commands are:
EOF

  echo -e "$commands" | sort | awk -F "SsS" '{printf("  %-20s %s\n", $1, $2)}'
  echo
  exit 0
fi

if [ -z "$1" ]; then
  peon_print red "No command (or invalid option) specified!"
  echo
else
  echo -n "$1 â†’ "
  peon_print red "Unknown command!"
  echo
fi

exit 1
