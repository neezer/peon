#!/usr/bin/env bash
set -o errexit

if ! command -v gawk > /dev/null 2>&1; then
  cat <<EOF
$(tinge red "gawk not found!")
Peon needs \`gawk\` in order to do work!
EOF
  exit 1
fi

if [ ! -f ".peon" ]; then
  cat <<EOF

$(tinge red "No peon configuration found!")

Peon needs to know a little more about your project
before you can put it to work!

1. Create a \`.peon\` file where you want to run peon
2. Add the line \`SCRIPTS_DIR="path/to/your/scripts/directory"\`
3. Run \`peon --commands\` to verify

Profit! :)

EOF
  exit 1
fi

. .peon

if [ -z "$SCRIPTS_DIR" ]; then
  cat <<EOF
$(tinge red "\$SCRIPTS_DIR is empty!")
Peon needs to know where to find tasks!
EOF
  exit 1
fi

if [ ! -d "$SCRIPTS_DIR" ]; then
  cat <<EOF
$(tinge red "\$SCRIPTS_DIR is not a directory!")
Peon expects \$SCRIPTS_DIR to be a directory containing bash scripts!
EOF
  exit 1
fi

list=1

while [ ! $# -eq 0 ]
do
  case "$1" in
    --help | -h)
      cat <<EOF

  peon does things for you!

  Usage: peon <command>

    -c, --commands       see what peon can do for you
    -h, --help           show this menu

EOF
      exit 0
      ;;
    --commands | -c)
      list=0
      ;;
    *)
      command="$1"
      break
      ;;
  esac
  shift
done

commands=""

while read -r -d '' file; do
  label=$(cat ${file} | \
    grep "peon:label" | \
    gawk 'match($0, /=>(.+)$/, a) {print a[1]}' | \
    sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
  desc=$(cat ${file} | \
    grep "peon:desc" | \
    gawk 'match($0, /=>(.+)$/, a) {print a[1]}' | \
    sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

  if [ -z "$label" ]; then
    continue
  fi

  commands="$commands\n$label\0$desc\0$file"
done < <(find $SCRIPTS_DIR -type f -name "*.bash" -print0)

matching_command=$(echo -e "$commands" | gawk -F "\0" "\$1==\"$command\" {print \$3}")

if [ ! -z "$matching_command" ]; then
  shift
  if [ "$AUTOLOAD_ENV_FILE" = "true" ]; then
    if [ ! -f .env ]; then
      cat <<EOF
$(tinge red ".env is not a file!")
You've configured peon to autoload env variables from \`.env\`, but it appears
that \`.env\` is not a file. Perhaps you forgot to create it from
\`.env.example?\`
EOF
      exit 1
    else
      exec env $(cat .env | grep -v "#" | xargs) "$matching_command" "$@"
    fi
  else
    exec "$matching_command" "$@"
  fi
fi

if [ $list = 0 ]; then
  cat <<EOF

Available commands are:
EOF

  echo -e "$commands" | sort | gawk -F "\0" '{printf("  %-20s %s\n", $1, $2)}'
  echo ""
  exit 0
fi

if [ -z "$1" ]; then
  echo $(tinge red "No command (or invalid option) specified!")
else
  echo "$1 â†’ $(tinge red "Unknown command!")"
fi

exit 1
